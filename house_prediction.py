# -*- coding: utf-8 -*-
"""house_prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1R4KaB1TouxL6lxps9fGsdx08rgP98jDU

Pertama-tama, karena menggunakan dataset kaggle, maka harus mengupload kaggle.json berisi username akun kaggle.
Untuk keamanan data tersebut, dapat menggunakan chmod 600

---
"""

from google.colab import files
!pip install -q kaggle
files.upload()
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 /root/.kaggle/kaggle.json

"""Masuk kedalam direktori yang kita kehendaki untuk mendownload dataset tersebut

---


"""

cd /content/drive/MyDrive/predictive_analysis

"""Mendownload dataset yang diinginkan

---


"""

!kaggle datasets download -d iamsouravbanerjee/house-rent-prediction-dataset --unzip

"""Meload dataset yang telah di unzip menggunakan pandas

---


"""

import pandas as pd
data_frame = pd.read_csv('/content/drive/MyDrive/predictive_analysis/House_Rent_Dataset.csv')

data_frame.head()

"""Melakukan drop column Posted On karena tidak dibutuhkan

---


"""

data_frame.drop(
    labels = "Posted On",
    axis=1,
    inplace=True
)

"""Mengecek apakah ada missing value di dalam data. Nilai True menunjukkan adanya missing value sebaliknya False menunjukkan tidak adanya missing value

---


"""

data_frame.isnull().any()

"""Shape menunjukkan banyak (rows, column) dalam data yang ada

---


"""

data_frame.shape

"""Menunjukkan keadaan data secara deskriptif

---


"""

data_frame.describe()

"""Mengidentifikasi adanya outliers menggunakan boxplot

---


"""

import seaborn as sns
import matplotlib.pyplot as plt
sns.boxplot(x=data_frame['Rent'])

sns.boxplot(x=data_frame['Size'])

sns.boxplot(x=data_frame['BHK'])

"""Menangani outliers menggunakan metode IQR

---


"""

Q1 = data_frame.quantile(0.25)
Q3 = data_frame.quantile(0.75)
IQR=Q3-Q1
data_frame=data_frame[~((data_frame<(Q1-1.5*IQR))|(data_frame>(Q3+1.5*IQR))).any(axis=1)]
 
# Cek ukuran dataset setelah kita drop outliers
data_frame.shape

"""Univariate analysis <br>
Melakukan pembagian numerical dan categorical features pada data 
"""

numerical_features = ['BHK', 'Rent', 'Size', 'Bathroom']
categorical_features = ['Furnishing Status', 'Tenant Preferred','Point of Contact', 'Area Type']

feature = categorical_features[0]
count = data_frame[feature].value_counts()
percent = 100*data_frame[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature, figsize=(10,6));

feature = categorical_features[1]
count = data_frame[feature].value_counts()
percent = 100*data_frame[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature, figsize=(10,6));

feature = categorical_features[2]
count = data_frame[feature].value_counts()
percent = 100*data_frame[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature, figsize=(10,6));

feature = categorical_features[3]
count = data_frame[feature].value_counts()
percent = 100*data_frame[feature].value_counts(normalize=True)
df = pd.DataFrame({'jumlah sampel':count, 'persentase':percent.round(1)})
print(df)
count.plot(kind='bar', title=feature, figsize=(10,6));

"""Melihat histogram numerical features

---


"""

data_frame.hist(bins=50, figsize=(20,15))
plt.show()

"""Multivariate analysis <br>
Harga rata-rata rumah dibandikan dengan tipe area, kota, status furnish rumah, dsb

---
"""

# house_features = data_frame.select_dtypes(include='object').columns.to_list()
house_features = ['Area Type', 'City', 'Furnishing Status', 'Tenant Preferred', 'Point of Contact']


for col in house_features:
  sns.catplot(x=col, y="Rent", kind="bar", dodge=False, height = 4, aspect = 3,  data=data_frame, palette="Set3")
  plt.title("Rata-rata 'price' Relatif terhadap - {}".format(col))

"""Mengukur skor korelasi antara fitur-fitur yang ada

---


"""

plt.figure(figsize=(10, 8))
correlation_matrix = data_frame.corr().round(2)
 
# Untuk menge-print nilai di dalam kotak, gunakan parameter anot=True
sns.heatmap(data=correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5, )
plt.title("Correlation Matrix untuk Fitur Numerik ", size=20)

"""Melakukan one-hot-encoding pada data categorical

---


"""

from sklearn.preprocessing import OneHotEncoder
data_frame = pd.concat([data_frame, pd.get_dummies(data_frame['Furnishing Status'], prefix='Furnishing Status')],axis=1)
data_frame = pd.concat([data_frame, pd.get_dummies(data_frame['Tenant Preferred'], prefix='Tenant Preferred')],axis=1)
data_frame = pd.concat([data_frame, pd.get_dummies(data_frame['Point of Contact'], prefix='Point of Contact')],axis=1)
data_frame = pd.concat([data_frame, pd.get_dummies(data_frame['Area Type'], prefix='Area Type')],axis=1)
data_frame = pd.concat([data_frame, pd.get_dummies(data_frame['Floor'], prefix='Floor')],axis=1)
data_frame = pd.concat([data_frame, pd.get_dummies(data_frame['City'], prefix='City')],axis=1)
data_frame = pd.concat([data_frame, pd.get_dummies(data_frame['Area Locality'], prefix='Area Locality')],axis=1)
data_frame.drop(['Furnishing Status','Tenant Preferred','Point of Contact', 'Area Type','Floor','City','Area Locality'], axis=1, inplace=True)
data_frame.head()

"""Membagi dataset menjadi beberapa bagian (test, train)

---


"""

from sklearn.model_selection import train_test_split
 
X = data_frame.drop(["Rent"],axis =1)
y = data_frame["Rent"]
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.1, random_state = 123)

"""Melakukan standarisasi pada data yang ada menggunakan library StandardScaler"""

from sklearn.preprocessing import StandardScaler
 
numerical_features = ['Size', 'Bathroom', 'BHK']
scaler = StandardScaler()
scaler.fit(X_train[numerical_features])
X_train[numerical_features] = scaler.transform(X_train.loc[:, numerical_features])
X_train[numerical_features].head()

"""Menunjukkan keadaan data secara deskriptif

---


"""

X_train[numerical_features].describe().round(4)

"""Data frame untuk model yang akan digunakan. Disini saya menggunakan KNN dan Random Forest

---


"""

models = pd.DataFrame(index=['train_mse', 'test_mse'], 
                      columns=['KNN', 'RandomForest'])

"""Melatih data dengan algoritma KNN"""

from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error
 
knn = KNeighborsRegressor(n_neighbors=10)
knn.fit(X_train, y_train)
 
models.loc['train_mse','knn'] = mean_squared_error(y_pred = knn.predict(X_train), y_true=y_train)

"""Melatih data dengan algoritma Random Forest"""

# Impor library yang dibutuhkan
from sklearn.ensemble import RandomForestRegressor
 
# buat model prediksi
RF = RandomForestRegressor(n_estimators=50, max_depth=16, random_state=55, n_jobs=-1)
RF.fit(X_train, y_train)
 
models.loc['train_mse','RandomForest'] = mean_squared_error(y_pred=RF.predict(X_train), y_true=y_train)

"""Melakukan scaling sehingga memiliki rata-rata=0 dan varians=1"""

X_test.loc[:, numerical_features] = scaler.transform(X_test[numerical_features])

# Buat variabel mse yang isinya adalah dataframe nilai mse data train dan test pada masing-masing algoritma
mse = pd.DataFrame(columns=['train', 'test'], index=['KNN','RF'])
 
# Buat dictionary untuk setiap algoritma yang digunakan
model_dict = {'KNN': knn, 'RF': RF}
 
# Hitung Mean Squared Error masing-masing algoritma pada data train dan test
for name, model in model_dict.items():
    mse.loc[name, 'train'] = mean_squared_error(y_true=y_train, y_pred=model.predict(X_train))/1e3 
    mse.loc[name, 'test'] = mean_squared_error(y_true=y_test, y_pred=model.predict(X_test))/1e3
 
# Panggil mse
mse

"""Hasil evaluasi pada masing-masing model

---
"""

fig, ax = plt.subplots()
mse.sort_values(by='test', ascending=False).plot(kind='barh', ax=ax, zorder=3)
ax.grid(zorder=0)

"""Hasil prediksi dari model tersebut untuk 1 harga rumah"""

prediksi = X_test.iloc[:1].copy()
pred_dict = {'y_true':y_test[:1]}
for name, model in model_dict.items():
    pred_dict['prediksi_'+name] = model.predict(prediksi).round(1)
 
pd.DataFrame(pred_dict)

"""Score akurasi untuk random forest"""

print("Random Forest Training Accuracy:", RF.score(X_train, y_train))
print("Random Forest Validation Accuracy", RF.score(X_test, y_test))

"""Score akurasi untuk k-nearest neighbors"""

print("K-Nearest Neighbors Training Accuracy:", knn.score(X_train, y_train))
print("K-Nearest Neighbors Validation Accuracy:", knn.score(X_test, y_test))